---
- name: Run update procedure
  when: komodo_action == "update"
  block:
    - name: Stop periphery service
      become: true
      become_user: "{{ systemd_ctx[komodo_service_scope].become_user }}"
      environment: "{{ systemd_ctx[komodo_service_scope].environment | default({}) }}"
      ansible.builtin.systemd:
        name: periphery
        state: stopped
        scope: "{{ systemd_ctx[komodo_service_scope].scope }}"
      failed_when: false
      when: komodo_user_exists

    - name: Remove old binaries
      ansible.builtin.file:
        path: "{{ komodo_bin_path }}"
        state: absent
      become: true
      when: komodo_bin_path is defined

    - name: Ensure binary path exists for download
      ansible.builtin.file:
        path: "{{ komodo_bin_dir }}"
        state: directory
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"
        mode: "0750"
      become: true

    - name: Ensure necessary directories
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"
        mode: "0750"
      with_items:
        - "{{ komodo_bin_dir }}"
        - "{{ komodo_config_dir }}"

    - name: Ensure Komodo base directory exists with correct ownership
      become: true
      ansible.builtin.file:
        path: "/etc/komodo"
        state: directory
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"
        mode: "0750"

    - name: Ensure SSL directory exists
      become: true
      ansible.builtin.file:
        path: "/etc/komodo/ssl"
        state: directory
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"
        mode: "0750"
        recurse: true
      when: ssl_enabled | default(true)

    - name: Fail if unsupported architecture
      ansible.builtin.fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}. Supported architectures are x86_64 and aarch64."
      when: ansible_architecture not in ['x86_64', 'aarch64']

    - name: Download Komodo Periphery Agent
      become: true
      ansible.builtin.get_url:
        url: "https://github.com/moghtech/komodo/releases/download/{{ _komodo_version }}/{{ binary_name }}"
        dest: "{{ komodo_bin_path }}"
        mode: "0755"
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"
        force: true

    - name: Gather passwd entry for Komodo user (UID/GID)
      ansible.builtin.getent:
        database: passwd
        key: "{{ komodo_user }}"

    - name: Deploy configuration file
      become: true
      ansible.builtin.template:
        src: "{{ komodo_config_file_template }}"
        dest: "{{ komodo_config_path }}"
        mode: "0640"
        owner: "{{ komodo_user }}"
        group: "{{ komodo_group }}"

    - block:
        - name: Ensure systemd unit directory exists
          become: true
          when: komodo_service_scope == "user"
          ansible.builtin.file:
            path: "{{ komodo_service_dir }}"
            state: directory
            owner: "{{ unit_owner }}"
            group: "{{ unit_group }}"
            mode: "{{ unit_mode }}"

        - name: Install systemd unit
          become: true
          ansible.builtin.template:
            src: "{{ komodo_service_file_template }}"
            dest: "{{ komodo_service_dir }}/periphery.service"
            owner: "{{ unit_owner }}"
            group: "{{ unit_group }}"
            mode: "0644"
      vars:
        _system_scope: (komodo_service_scope | default('user')) == 'system'
        unit_owner: "{{ 'root' if _system_scope else komodo_user }}"
        unit_group: "{{ 'root' if _system_scope else komodo_group }}"
        unit_mode: "{{ '0755' if _system_scope else '0750' }}"

    - name: Reload user systemd
      become: true
      become_user: "{{ systemd_ctx[komodo_service_scope].become_user }}"
      environment: "{{ systemd_ctx[komodo_service_scope].environment | default({}) }}"
      ansible.builtin.systemd:
        daemon_reload: true
        scope: "{{ systemd_ctx[komodo_service_scope].scope }}"
      when: komodo_user_exists

    - name: Enable periphery
      become: true
      become_user: "{{ systemd_ctx[komodo_service_scope].become_user }}"
      environment: "{{ systemd_ctx[komodo_service_scope].environment | default({}) }}"
      ansible.builtin.systemd:
        name: periphery
        enabled: true
        scope: "{{ systemd_ctx[komodo_service_scope].scope }}"
      when: komodo_user_exists

    - name: Start periphery
      become: true
      become_user: "{{ systemd_ctx[komodo_service_scope].become_user }}"
      environment: "{{ systemd_ctx[komodo_service_scope].environment | default({}) }}"
      ansible.builtin.systemd:
        name: periphery
        state: started
        scope: "{{ systemd_ctx[komodo_service_scope].scope }}"
      when: komodo_user_exists
